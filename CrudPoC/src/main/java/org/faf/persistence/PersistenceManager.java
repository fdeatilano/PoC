package org.faf.persistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.faf.persistence.db.CheckIn;
import org.faf.persistence.db.User;
import org.faf.persistence.db.exceptions.UnableToCreateCheckInException;
import org.faf.persistence.db.exceptions.UnableToRetrieveCheckInException;
import org.faf.persistence.db.exceptions.UnableToRetrieveIdException;
import org.faf.persistence.util.Device;
import org.faf.persistence.util.GeoLocation;

public class PersistenceManager {

	private static final String DB_URI = "jdbc:hsqldb:file:/home/francisco/resources/pocDb/CrudPoCDb";
	private static final String DB_USER = "walkin";
	private static final String DB_PASSWORD = "walkin";
	private static final Integer INITIAL_PARAM_INDEX = 0;

	public void create(CheckIn checkIn) throws UnableToCreateCheckInException, UnableToRetrieveIdException {
		Connection conn;
		try {
			conn = DriverManager.getConnection(DB_URI, DB_USER, DB_PASSWORD);
			
			String insertCheckInQuery = "INSERT INTO checkins "
					+ "(user_id,longitude,latitude,device)" 
					+ "VALUES (?,?,?,?)";
			PreparedStatement prepStmInsert = conn.prepareStatement(insertCheckInQuery);
			Integer paramIndex = INITIAL_PARAM_INDEX;
			prepStmInsert.setInt(++paramIndex, checkIn.getUserId());
			prepStmInsert.setDouble(++paramIndex, checkIn.getLongitude());
			prepStmInsert.setDouble(++paramIndex, checkIn.getLatitude());
			prepStmInsert.setString(++paramIndex, checkIn.getDeviceName());
			if(prepStmInsert.executeUpdate()!=1){
				throw new UnableToCreateCheckInException();
			}
			prepStmInsert.close();
			
			String getIdentityQuery="CALL IDENTITY()";
			PreparedStatement prepStmIdentity = conn.prepareStatement(getIdentityQuery);
			ResultSet rsIdentity = prepStmIdentity.executeQuery();
			if(rsIdentity.next()){
				Integer identity = rsIdentity.getInt(1);
				if(identity==0){
					throw new UnableToRetrieveIdException();
				}
				checkIn.setId(identity);
			}else{
				throw new UnableToRetrieveIdException();
			}
			rsIdentity.close();
			prepStmIdentity.close();
			
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new UnableToCreateCheckInException();
		}
	}

	public void initializeDB() throws SQLException {
		deleteDB();
		createDB();
	}

	private void createDB() throws SQLException {
		Connection conn;
		conn = DriverManager.getConnection(DB_URI, DB_USER, DB_PASSWORD);
		
		String createCheckInTableQuery = "CREATE TABLE checkins("
				+ "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
				+ "user_id INTEGER,"
				+ "longitude DOUBLE," 
				+ "latitude DOUBLE,"
				+ "device VARCHAR(255))";			
		PreparedStatement prepStmCreateCheckins = conn.prepareStatement(createCheckInTableQuery);
		prepStmCreateCheckins.execute(); 
		prepStmCreateCheckins.close();
		
		String createUserTableQuery = "CREATE TABLE users("
				+ "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
				+ "login VARCHAR(255),"
				+ "password VARCHAR(255))";			
		PreparedStatement prepStmCreateUsers = conn.prepareStatement(createUserTableQuery);
		prepStmCreateUsers.execute(); 
		prepStmCreateUsers.close();
		conn.close();
	}
	
	private void deleteDB() throws SQLException{
		Connection conn;
		conn = DriverManager.getConnection(DB_URI, DB_USER, DB_PASSWORD);
		
		String dropUsersTableQuery = "DROP TABLE users IF EXISTS";
		String dropCheckInsTableQuery = "DROP TABLE checkins IF EXISTS";
		PreparedStatement prepStmDropUsers = conn.prepareStatement(dropUsersTableQuery);
		prepStmDropUsers.execute();
		prepStmDropUsers.close();
		PreparedStatement prepStmDropCheckins = conn.prepareStatement(dropCheckInsTableQuery);
		prepStmDropCheckins.execute();
		prepStmDropCheckins.close();
		conn.close();
	}

	public CheckIn read(Integer id) throws UnableToRetrieveCheckInException, UnableToRetrieveIdException {
		try {
			Connection conn = DriverManager.getConnection(DB_URI, DB_USER, DB_PASSWORD);
			
			String selectCheckInQuery = "SELECT checkins.id,users.id AS user, longitude, latitude, device "
					+ "FROM checkins "
					+ "LEFT JOIN users ON users.id=checkins.user_id "
					+ "WHERE checkins.id=?"; 
			PreparedStatement prepStmSelect = conn.prepareStatement(selectCheckInQuery);
			Integer paramIndex = INITIAL_PARAM_INDEX;
			prepStmSelect.setInt(++paramIndex, id);
			ResultSet rsCheckIn = prepStmSelect.executeQuery();
			CheckIn checkIn = null;
			if(rsCheckIn.next()){
				User user = new User("login","password");
				user.setId(rsCheckIn.getInt("user"));
				Double longitude=rsCheckIn.getDouble("longitude");
				Double latitude=rsCheckIn.getDouble("latitude");
				GeoLocation geoLoc = new GeoLocation(longitude, latitude);
				Device device = new Device(rsCheckIn.getString("device"));
				checkIn = new CheckIn(user, geoLoc, device);
				checkIn.setId(rsCheckIn.getInt("id"));
			}else{
				throw new UnableToRetrieveIdException();
			}
			prepStmSelect.close();
			return checkIn;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new UnableToRetrieveCheckInException();
		}
	}

	
}
